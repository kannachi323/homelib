// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: blob.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "blob";

export interface Blob {
  src: string;
  dst: string;
  channelName: string;
  timestamp: string | undefined;
  size: Long;
  data: Uint8Array;
  fileName: string;
  fileType: string;
  chunkIndex: number;
  totalChunks: number;
}

function createBaseBlob(): Blob {
  return {
    src: "",
    dst: "",
    channelName: "",
    timestamp: undefined,
    size: Long.ZERO,
    data: new Uint8Array(0),
    fileName: "",
    fileType: "",
    chunkIndex: 0,
    totalChunks: 0,
  };
}

export const Blob: MessageFns<Blob> = {
  encode(message: Blob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.dst !== "") {
      writer.uint32(18).string(message.dst);
    }
    if (message.channelName !== "") {
      writer.uint32(26).string(message.channelName);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(34).fork()).join();
    }
    if (!message.size.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.size.toString());
    }
    if (message.data.length !== 0) {
      writer.uint32(50).bytes(message.data);
    }
    if (message.fileName !== "") {
      writer.uint32(58).string(message.fileName);
    }
    if (message.fileType !== "") {
      writer.uint32(66).string(message.fileType);
    }
    if (message.chunkIndex !== 0) {
      writer.uint32(72).int32(message.chunkIndex);
    }
    if (message.totalChunks !== 0) {
      writer.uint32(80).int32(message.totalChunks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Blob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.src = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dst = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.size = Long.fromString(reader.int64().toString());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.chunkIndex = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.totalChunks = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Blob {
    return {
      src: isSet(object.src) ? globalThis.String(object.src) : "",
      dst: isSet(object.dst) ? globalThis.String(object.dst) : "",
      channelName: isSet(object.channelName) ? globalThis.String(object.channelName) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : undefined,
      size: isSet(object.size) ? Long.fromValue(object.size) : Long.ZERO,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
      chunkIndex: isSet(object.chunkIndex) ? globalThis.Number(object.chunkIndex) : 0,
      totalChunks: isSet(object.totalChunks) ? globalThis.Number(object.totalChunks) : 0,
    };
  },

  toJSON(message: Blob): unknown {
    const obj: any = {};
    if (message.src !== "") {
      obj.src = message.src;
    }
    if (message.dst !== "") {
      obj.dst = message.dst;
    }
    if (message.channelName !== "") {
      obj.channelName = message.channelName;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp;
    }
    if (!message.size.equals(Long.ZERO)) {
      obj.size = (message.size || Long.ZERO).toString();
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    if (message.chunkIndex !== 0) {
      obj.chunkIndex = Math.round(message.chunkIndex);
    }
    if (message.totalChunks !== 0) {
      obj.totalChunks = Math.round(message.totalChunks);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Blob>, I>>(base?: I): Blob {
    return Blob.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Blob>, I>>(object: I): Blob {
    const message = createBaseBlob();
    message.src = object.src ?? "";
    message.dst = object.dst ?? "";
    message.channelName = object.channelName ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.size = (object.size !== undefined && object.size !== null) ? Long.fromValue(object.size) : Long.ZERO;
    message.data = object.data ?? new Uint8Array(0);
    message.fileName = object.fileName ?? "";
    message.fileType = object.fileType ?? "";
    message.chunkIndex = object.chunkIndex ?? 0;
    message.totalChunks = object.totalChunks ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(((globalThis as any).Buffer.from(b64, "base64")));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return (globalThis as any).Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
